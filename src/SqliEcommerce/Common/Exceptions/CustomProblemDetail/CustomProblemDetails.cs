using Microsoft.AspNetCore.Mvc;
using System.Text.Json.Serialization;

namespace Common.Exceptions.CustomProblemDetail
{
    public class CustomProblemDetails
    {
        public string? Type { get; set; }
        //
        // Summary:
        //     A short, human-readable summary of the problem type. It SHOULD NOT change from
        //     occurrence to occurrence of the problem, except for purposes of localization(e.g.,
        //     using proactive content negotiation; see[RFC7231], Section 3.4).
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("title")]
        [JsonPropertyOrder(-4)]
        public string? Title { get; set; }
        //
        // Summary:
        //     The HTTP status code([RFC7231], Section 6) generated by the origin server for
        //     this occurrence of the problem.
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("status")]
        [JsonPropertyOrder(-3)]
        public int? Status { get; set; }
        //
        // Summary:
        //     A human-readable explanation specific to this occurrence of the problem.
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("details")]
        [JsonPropertyOrder(-2)]
        public IEnumerable<string>? Details { get; set; }

        //
        // Summary:
        //     A URI reference that identifies the specific occurrence of the problem. It may
        //     or may not yield further information if dereferenced.
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("instance")]
        [JsonPropertyOrder(-1)]
        public string? Instance { get; set; }

        public static CustomProblemDetails ToCustomProblemDetail(ProblemDetails problemDetails)
        {
            return new()
            {
                Title = problemDetails.Title,
                Status = problemDetails.Status,
                Instance = problemDetails.Instance,
                Details = FormatValidationErrors(problemDetails.Detail)
            };
        }

        /// <summary>
        /// Parse error details
        /// "detail": "Validation failed: \r\n -- ImageFile: Invalid image format Severity: Error\r\n -- : 
        ///  Description is required when the price is above 100 Severity: Error",
        /// </summary>
        /// <param name="detail">Error detail</param>
        /// <returns>Convert the detail to list of strings</returns>
        private static List<string> FormatValidationErrors(string? detail)
        {
            if (string.IsNullOrWhiteSpace(detail))
            {
                return [];
            }

            var formattedErrors = new List<string>();

            // Split the detail string by lines
            var lines = detail.Split(new[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries);

            // Remove the prefix "Validation failed: " from the first line and add it to the list
            if (lines.Length > 0)
            {
                formattedErrors.Add("Validation failed:");
            }

            // Process each line to extract and format the validation errors
            foreach (var line in lines.Skip(1)) // Skip the first line as it is the prefix
            {
                // Trim leading and trailing whitespaces and "--"
                var errorLine = line.TrimStart('-', ' ').Trim();

                // Add formatted error line to the list
                formattedErrors.Add(errorLine);
            }

            return formattedErrors;
        }
    }
}
